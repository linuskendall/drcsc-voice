;# -*- mode: asterisk -*-
;# vi: set ft=asterisk :
[qa-answer]
exten => s,1,Answer(500)
  same => n,agi(googletts.agi,"Welcome to the farmers information system",en)
  same => n,MYSQL(Connect connid localhost drcsc drcsc drcsc)
  same => n,GotoIf($["${connid}" = ""]?e,1)
  same => n,MYSQL(Query resultid ${connid} SELECT id, location FROM users WHERE callerid='${CALLERID(num)}') 
  same => n,MYSQL(Fetch fetchid ${resultid} userid userlocation) ; Read user id and location into a local variable
  same => n,MYSQL(Clear ${resultid})
  same => n,GosubIf($["${fetchid}" = "0"]?qa-registration,s,1) ; No user id, then go to registration 
  same => n,GotoIf($["${userid}" = ""]?e,1) ; Check for error
  same => n,agi(googletts.agi,"Using this number, you can answer questions from farmers",en);,0123)
  same => n,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n(loop),Gosub(qa-listen,s,1)
  same => n,agi(googletts.agi,"Thank you. Goodbye.",en)
  same => n,Hangup

exten => e,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Playback(an-error-has-occurred)
  same => n,Hangup

exten => h,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,MYSQL(Disconnect ${connid})

;*** Listen to all messages
[qa-listen]
exten => s,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,MYSQL(Query resultid ${connid} SELECT COUNT(*) FROM messages, users WHERE messages.user_id=users.id AND messages.replyto = -1 AND messages.callerid != ${CALLERID(num)} AND messages.id NOT IN (SELECT message_id FROM listened WHERE user_id='${userid}') AND messages.id NOT IN (SELECT replyto FROM messages WHERE replyto != -1 GROUP BY replyto HAVING COUNT(*) >= 2) AND users.location LIKE '${userlocation}') 
  same => n,GotoIf($["${resultid}" = ""]?qa-answer,e,1)
  same => n,MYSQL(Fetch fetchid ${resultid} NEW_COUNT)
  same => n,MYSQL(Clear ${resultid})
  same => n,GotoIf($[${NEW_COUNT} > 0]?1,1) 
  same => n,agi(googletts.agi,"There are no new questions",en)
  same => n,Return(1)

; Playing new messages
exten => 1,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,agi(googletts.agi,"Playing all new questions",en)
  same => n,agi(googletts.agi,"There are",en)
  same => n,SayNumber(${NEW_COUNT})
  same => n,agi(googletts.agi,"new questions",en)
  ; Fetch all non reply messages
  same => n,MYSQL(Query resultid ${connid} SELECT messages.id, messages.callerid, messages.filename FROM messages,users WHERE messages.user_id=users.id AND messages.replyto=-1 AND users.callerid != ${CALLERID(num)} AND messages.id NOT IN (SELECT message_id FROM listened WHERE user_id='${userid}') AND messages.id NOT IN (SELECT replyto FROM messages WHERE replyto != -1 GROUP BY replyto HAVING COUNT(*) >= 2) AND users.location LIKE '${userlocation}' ORDER BY rand()) 
  same => n,Gosub(qa-listen-all,s,1) 
  same => n,agi(googletts.agi,'No more new questions.',en)
  same => n,Gosub(r,1) ; mark emssages as read

; Mark all messages as read 
exten => r,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,While($[${MESSAGEN} != 0])
  same => n,GotoIf($[$[MESSAGESKIP_${MESSAGEN}] != 0]?loop)
  same => n,MYSQL(Query resultid ${connid} INSERT INTO listened SET user_id='${userid}', message_id='${$[MESSAGEID_${MESSAGEN}]}')
  same => n(loop),Set(MESSAGEN=$[${MESSAGEN}-1])
  same => n,EndWhile
  same => n,Return()

; Error
exten => e,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-answer,e,1)

; Hang-up, jump to cleanup
exten => h,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,GoSub(r,1)
  same => n,Goto(qa-answer,h,1)

[qa-listen-all]
; Play messages from a previously fetched list
; Requires a resultid to have been fetched
; Sets variables MESSAGEN (number of messages, MESSAGEID_n = id of message number n
exten => s,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,GotoIf($["${resultid}" = ""]?qa-answer,e,1)
  same => n,Set(MESSAGEN=0)
  same => n(fetch),MYSQL(Fetch fetchid ${resultid} id callerid filename) ; loop begin
  same => n,GotoIf($[${fetchid}]?:endresult)
  same => n,Set(MESSAGEN=$[${MESSAGEN}+1])
  same => n,Set(MESSAGEID_${MESSAGEN}=${id})
  same => n,Set(MESSAGESKIP_${MESSAGEN}=0)
  same => n,Gosub(qa-listen-single,s,1)
  same => n,Goto(fetch) ; loop end
  same => n(endresult),MYSQL(Clear ${resultid})
  same => n,Return()

; Error
exten => e,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-listen,e,1)

; Hang-up, jump to cleanup
exten => h,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-listen,h,1)

[qa-listen-single]
exten => s,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,agi(googletts.agi,"Question",en)
  same => n,SayNumber(${MESSAGEN})
  same => n,Playback(beep)
  same => n,Background(${filename})  ; The user can dial any input here
  same => n,Background(silence/2) ; Setting silence to 3 seconds
  same => n,Background(beep)
  same => n,Goto(0,1)

exten => 0,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,agi(googletts.agi,"To reply to this question, press 1",en,0123)
  same => n,agi(googletts.agi,"To skip this question, press 2",en,0123)
  same => n,agi(googletts.agi,"To hear the question again, press 3",en,0123)
  same => n,WaitExten(7)

; Record a reply
exten => 1,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Gosub(qa-record-reply,s,1)
  same => n,Return(0)

; Skip
exten => 2,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,agi(googletts.agi,"Skipping",en)
  same => n,Return(0)

; Listen again
exten => 3,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,agi(googletts.agi,"Repeating",en)
  same => n,Goto(s,1) ; play the same result again

; Invalid option, play help
exten => i,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Playback(option-is-invalid)
  same => n,Goto(0,1)
 
; Timeout, go to the next question 
exten => t,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Set(MESSAGESKIP_${MESSAGEN}=1)
  same => n,Return()

; Error
exten => e,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-answer,e,1)

; Hang-up, jump to cleanup
exten => h,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Set(MESSAGESKIP_${MESSAGEN}=1)
  same => n,Goto(qa-listen,h,1)

; Record a reply
[qa-record-reply]
exten => s,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,GotoIf($["${id}" = ""]?qa-answer,e,1)
  same => n,Playback(silence/2)
  same => n,agi(googletts.agi,"You are recording a reply",en)
  same => n,agi(googletts.agi,"After the beep, record your reply and end with star",en)
  same => n,Playback(silence/2)
  same => n,Record(/var/spool/asterisk/messages/reply-${id}-${CALLERID(num)}-${STRFTIME(${EPOCH},,%d%m%Y%H%M)}-%d:ulaw,10,0,t) ; 5 second silence, no maximum, alternate delimiter "*"
  same => n,MYSQL(Query reply_resultid ${connid} INSERT INTO messages SET callid='${UNIQUEID}', callerid='${CALLERID(num)}', replyto='${id}', user_id='${userid}', filename='${RECORDED_FILE}', dt=NOW())
  same => n,agi(googletts.agi,'Your reply has been recorded',en)
  same => n,Return()

; Invalid option, play help
exten => i,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Playback(option-is-invalid)
  same => n,Goto(s,1)
 
; Timeout
exten => t,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Playback(are-you-still-there)
  same => n,Goto(s,1) ; return to start

; Error
exten => e,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-answer,e,1)

; Hang-up, jump to cleanup
exten => h,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-answer,h,1)

; Register a new user
[qa-registration]
exten => s,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Set(LOCATION=s24pgs)
  same => n,MYSQL(Query resultid ${connid} INSERT INTO users SET callerid='${CALLERID(num)}', location='${LOCATION}')
  same => n,MYSQL(Query resultid ${connid} SELECT id,location FROM users WHERE callerid='${CALLERID(num)}') 
  same => n,MYSQL(Fetch fetchid ${resultid} userid userlocation)
  same => n,Return()

; Error
exten => e,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-answer,e,1)

; Hang-up, jump to cleanup
exten => h,1,Gosub(log,s,1(${CONTEXT}, ${PRIORITY}, ${EXTEN}))
  same => n,Goto(qa-answer,h,1)

[log]
exten => s,1,MYSQL(Query resultid ${connid} INSERT INTO log SET dt=NOW(), callid='${UNIQUEID}', callerid='${CALLERID(num)}', user_id='${userid}', context='${ARG1}', exten='${ARG2}', prio='${ARG3}', action='${ARG4}', action_params='${ARG5}')
  same => n,Return()
